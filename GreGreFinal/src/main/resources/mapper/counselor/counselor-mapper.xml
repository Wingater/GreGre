<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="counselor">

	<!-- 결제  -->
	<insert id="bookingInfo">
	insert into
		TB_appointment
	values (
		seq_appoint_no.nextval,
		#{memberId},
		#{advisId},
		#{coin},
		sysdate,
		sysdate+#{coin}*7,
		#{payPrice},
		#{payInfo},
		#{advisName},
		#{advisImg}
	)
	 <selectKey keyProperty="appointNo" resultType="string" order="AFTER">
            SELECT seq_appoint_no.currval
              FROM dual
      </selectKey>
	</insert>
	
	<!-- 예약정보 -->
	<select resultType="BookingInfo" id="bookingSelect">
		SELECT
			*
		FROM
			TB_appointment
		where 
			appoint_no = #{appointNo}
	</select>
	
	<!-- 최근 구매 내역 중복 구매 불가 -->
	<select id="recentSelectOne" resultType="_int">
		select
		count(*)
	from (
        select coin, rank() over(order by appoint_no desc) rank
        from TB_appointment
        where
		member_id = #{memberId}
        )
	where
		rank =1
        and coin != 0
	</select>
	
	
	<!-- 상담사 리스트 출력  -->
	<select resultType="counselor" id="selectCounselorList" resultMap="counselorCollection">
		select 
			*
		from 
			TB_adviser
		where
			advis_grade != '1'
	</select>
	
	<!-- 상담사 전체 인원 count  -->
	<select resultType="_int" id="selectCounselorTotalContents">
		SELECT
			COUNT(*)
		FROM
			TB_adviser
		where
			advis_grade != '1'
	</select>
	
	<!-- 상담사별 리뷰게시글 숫자 count -->
	<select resultType="_int" id="selectCounselorReviewCount">
		select 
    		count(*) 
		from 
    		TB_adviser A join TB_adviser_review R 
        		on A.advis_id = R.advis_id
    	where A.advis_id = #{advis_id}
	</select>

	
	<!-- 상담사 1명 선택  -->
	<select id="selectOne" resultMap="counselorCollection">
		select 
			* 
		from 
			TB_adviser 
		where 
			advis_id = #{advis_id}
	</select>
	
	<select id="selectFilter" resultMap="counselorCollection">
	
	select
		*
	from
		TB_adviser
	where
		1=1
	<if test = "category.length != 0">
		<foreach collection="category"
					item="advisKeyword" index="i">
		<if test="i==0">
			and (advis_keyword like '%${advisKeyword}%'
		</if>
		<if test="i!=0">
			or advis_keyword like '%${advisKeyword}%'
		</if>
		</foreach>
		)
	</if>
	<if test="level.length != 0">
		<foreach collection="level"
					item="advisGrade" index="i">
			<if test="i==0">
			and (advis_grade like '%${advisGrade}%'
			</if>
			<if test="i!=0">
			or advis_grade like '%${advisGrade}%'
			</if>
		</foreach>
		)
		
	</if>	
	<if test="gender.length !=0">
	and advis_gender in 
		<foreach collection="gender"
					item="gender"
					open="("
					close=")"
					separator=",">
		#{gender}
		</foreach>
	</if>	
	<if test="day.length != 0">
	and advis_day in 
		<foreach collection="day"
					item="day"
					open="("
					close=")"
					separator=",">
		#{day}
		</foreach>
	</if>

	</select>
	
	<select id="selectReviewTotal" resultType="_int">
	select count(*) reviewTotal
	from TB_adviser_review
	where advis_id = #{advisId}
	</select>
	
	<select id="selectStarPoint" resultType="_double">
	select nvl(avg(star_point),0) starPoint
	from TB_adviser_review
	where advis_id = #{advisId}
	</select>
	
	
	<resultMap type="counselor" id="keywordMap">
		<result column="advis_keyword" property="advisKeyword" typeHandler="strArrTypeHandler"/>
	</resultMap>
	
	<resultMap type="counselor" id="counselorCollection">
		<id column="advis_id" property="advisId"/>
		<result column="advis_name" property="advisName"/>	
		<result column="advis_intro" property="advisIntro"/>	
		<result column="advis_line_intro" property="advisLineIntro"/>	
		<result column="advis_career" property="advisCareer"/>	
		<result column="advis_license" property="advisLicense"/>	
		<result column="advis_grade" property="advisGrade"/>	
		<result column="advis_gender" property="advisGender"/>	
		<result column="advis_day" property="advisDay"/>	
		<result column="advis_price" property="advisPrice"/>	
		<result column="advis_keyword" property="advisKeyword" typeHandler="strArrTypeHandler"/>	
		<result column="advis_license_file" property="advisLicenseFile"/>	
		<result column="advis_img" property="advisImg"/>		
	</resultMap>
	
	<select id="findChatIdByMemberId" resultType="string">
	select 
	    chat_id
	from 
	    counselor_chat_view
	where
	    cr_enabled = 'Y'
	  and 
	    cm_enabled = 'Y'
	  and
	    member_id = #{memberId}
	</select>
	
		<select id="selectOneChatId" resultType="string">
		select 
			chat_id
		from
			counselor_chat_view
		where
			chat_id = #{chatId}
	</select>

	<insert id="insertChatLog">
		insert into 
		    counselor_chat_log 
		        (id, chat_room_id, member_id, msg, time)
		values(
		    counselor_seq_chat.nextval, 
				(select id from counselor_chat_room where chat_id = #{chatId}), 
				#{memberId}, 
				#{msg}, 
				#{time}
			)
		</insert>
	
		<select id="findRecentList" resultType="map">
	select 
		    *
		from (
		    select 
		        cl.id,
		        cv.cr_id,
		        cv.chat_id,
		        (select member_id from counselor_chat_view where cr_id = cl.chat_room_id and member_id != #{memberId}) member_id,
		        cl.msg,
		        cl.time,
		        count(*) over(partition by cl.chat_room_id,cl.member_id) cnt,
		        rank() over(partition by cl.chat_room_id order by time desc) rank 
		    from 
		        counselor_chat_log cl
		      left join
		        counselor_chat_view cv
		             on cl.chat_room_id = cv.cr_id and cl.member_id = cv.member_id left join counselor_chat_room ccr on ccr.chat_id =  cv.chat_id
		    where 
            ccr.enabled ='Y'
		      and time > (select last_check from counselor_chat_view where cr_id = cl.chat_room_id and member_id = #{memberId})
		    order by
		        time desc
		    )
		where 
		    rank = 1
	</select>

	<select id="findChatListByChatId" resultType="msg">
		select
		    * 
		from 
		    counselor_chat_log
		where 
		    chat_room_id = (select id from counselor_chat_room where chat_id = #{chatId})
		order by 
		    id
	</select>
	
	<update id="updateLastCheck">
	update 
	    counselor_chat_member
	set 
	    last_check =  #{time}
	where 
	    chat_room_id = (select id from counselor_chat_room where chat_id = #{chatId})
	  and 
	    member_id = #{counselorId}
</update>

<select id="counselorFindId" resultType="string">
	select
		advis_ID
	from (
        select advis_ID, rank() over(order by appoint_no desc) rank
        from TB_appointment
        where
		member_id = #{memberId}
        )
	where
		rank =1
	</select>
	
	<select id="memberFindId" resultType="string">
	select
		member_Id
	from (
        select member_Id, rank() over(order by appoint_no desc) rank
        from TB_appointment
        where
		member_id = #{counselorId}
        )
	where
		rank =1
	</select>
	
	<insert id="insertChatRoom">
		insert into
		    counselor_chat_room 
		        (id, chat_id)
		values(
		    counselor_seq_chat.nextval, 
		    #{chatId}
		)
		<selectKey order="AFTER" keyProperty="id" resultType="_long">
			select 
				counselor_seq_chat.currval
			from
				dual
		</selectKey>
	</insert>
	
	
	<insert id="insertChatMember">
		insert into
		    counselor_chat_member
		        (id, chat_room_id, member_id)
		
		values(
		    counselor_seq_chat.nextval,
		    #{chatRoom.id},
		    #{memberId}
		)
	</insert>
	
	<select id="counselorRoomNum" resultType="_int">
	select
	 ID
	 from counselor_chat_room
	 where chat_id = #{chatId}
	</select>
	
	<select id="counselorReadCountM" resultType="_int">
	select
		    count(*)
		from 
		    counselor_chat_log
		where 
		    chat_room_id = #{roomNum}
		    and member_id = #{counselorId}
		    and enabled = 'Y'
	</select>
	
	<select id="counselorReadCountC" resultType="_int">
	select
		    count(*)
		from 
		    counselor_chat_log
		where 
		    chat_room_id = #{chatRoom}
		    and member_id = #{memberId}
		    and enabled = 'Y'
	</select>
	
	<update id="updateLastCheckM">
	update
		counselor_chat_log
	set 
		enabled = 'N'
	where 
		member_Id = #{memberId}
	</update>
	<update id="updateLastCheckC">
	update
		counselor_chat_log
	set 
		enabled = 'N'
	where 
		member_Id = #{memberId}
	</update>
	
	<select id="memberIdFindChatListByChatId" resultType="string">
	select member_Id
	from counselor_chat_view
	where chat_id =#{chatId}
	and member_id != #{counselorId}
	</select>
	
	<select id="counselorInfo" resultType="ChatInfo">
	select *
	from TB_appointment p join TB_adviser a
	using (advis_id)
	where advis_id = #{counselorId}
	and member_id = #{memberId}
	and coin != 0
	</select>
	
	<select id="counselorCheckProduct" resultType="_int">
	select count(*)
	from TB_appointment
	where member_Id = #{memberId}
	and coin != 0
	 and start_day <![CDATA[ <= ]]> to_date(#{today},'yyyy/mm/dd/ hh24:mi:ss')  
    and end_day >= to_date(#{today},'yyyy/mm/dd/ hh24:mi:ss')
	</select>
	
	<select id="counselorCheckToday" resultType="_int">
	select count(*)
	from   (select today, rank() over(order by today desc) rank
	            from TB_chatChek
	            where member_id = #{memberId}
	            )
	where rank = 1
	and today+7> to_date(#{today},'yyyy/mm/dd/ hh24:mi:ss') 
	</select>
	
	<insert id="counselorCheckOK">
	insert into TB_chatChek 
	values(
	counselor_seq_chatChek.nextval,
	#{memberId},
	#{chatId},
	#{today}
	)
	</insert>
	
	<update id="counselorDownCoin">
	update 
		TB_appointment
	set
		coin = coin -1
	where
		member_id = #{memberId}	
		and coin != 0

	</update>
	
	<select id="counselorCoinCheck" resultType="_int">
select
		coin
	from (
        select coin, rank() over(order by appoint_no desc) rank
        from TB_appointment
        where
		member_id = #{memberId}
        )
	where
		rank =1
	</select>
	
	<update id="counselorOutChatRoom">
	update
		counselor_chat_room
	set
		enabled = 'N'
	where
		chat_id = #{chatId}
	</update>
	
	<delete id="counselorDeleteCheck">
	delete from TB_chatChek where chat_id = #{chatId}
	</delete>
	

	
</mapper>